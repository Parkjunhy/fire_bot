import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Point
from std_msgs.msg import String
from time import sleep

class ObjectAlignment(Node):

    def __init__(self):
        super().__init__('object_alignment')

        # Camera resolution
        self.camera_width = 640
        self.center_x = self.camera_width / 2  # Center coordinate of the camera

        # publishing to motor commanding topics and extingtuish~
        self.left_motor_pub = self.create_publisher(String, 'dc_motor_1_command', 10)
        self.right_motor_pub = self.create_publisher(String, 'dc_motor_2_command', 10)

        self.extinguish_pub = self.create_publisher(String, 'extinguish', 10)

        # sub~
        self.create_subscription(Point, 'fire_location', self.object_callback, 10)

        self.alignment_tolerance = 10  # TOLERANCE(20x 5x)

        self.is_aligned = False

    def object_callback(self, msg):
        object_x = msg.x 
        self.align_robot(object_x)

    def align_robot(self, object_x):
        offset = object_x - self.center_x

        left_motor_command = String()
        right_motor_command = String()

        if abs(offset) > self.alignment_tolerance:
            self.is_aligned = False
            if offset > 0:
                # right - clockwise
                left_motor_command.data = "forward 50"  
                right_motor_command.data = "backward 50"  
            else:
                # left - counterclockwise
                left_motor_command.data = "backward 50"  
                right_motor_command.data = "forward 50"  
        else:
            if not self.is_aligned:
                self.is_aligned = True
                self.get_logger().info(f"Aligned with object. Object X: {object_x}. Stopping briefly...")

                left_motor_command.data = "forward 0"
                right_motor_command.data = "forward 0"
                self.left_motor_pub.publish(left_motor_command)
                self.right_motor_pub.publish(right_motor_command)
                sleep(1) 

                self.get_logger().info("Moving forward for 10 seconds...")
                left_motor_command.data = "forward 50"
                right_motor_command.data = "forward 50"
                self.left_motor_pub.publish(left_motor_command)
                self.right_motor_pub.publish(right_motor_command)

                sleep(4)  

                self.get_logger().info("Stopping after 10 seconds.")
                left_motor_command.data = "forward 0"
                right_motor_command.data = "forward 0"
                self.left_motor_pub.publish(left_motor_command)
                self.right_motor_pub.publish(right_motor_command)

                self.extinguish_pub.publish("start")

        self.left_motor_pub.publish(left_motor_command)
        self.right_motor_pub.publish(right_motor_command)

def main(args=None):
    rclpy.init(args=args)
    object_alignment = ObjectAlignment()

    try:
        rclpy.spin(object_alignment)
    except KeyboardInterrupt:
        pass

    object_alignment.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()

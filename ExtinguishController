import rclpy
from rclpy.node import Node
from std_msgs.msg import String
import lgpio
import time
import threading

# pinmap
STEP_PIN = 19
DIR_PIN = 26
ENA_PIN = 13

ACTUATOR_IN_A = 20
ACTUATOR_IN_B = 21
ACTUATOR_PWM = 12  

class ExtinguishController(Node):

    def __init__(self):
        super().__init__('extinguish_controller')
        
        self.subscription = self.create_subscription(String, 'extinguish', self.extinguish_callback, 10)

        self.chip = lgpio.gpiochip_open(0)
        lgpio.gpio_claim_output(self.chip, STEP_PIN, 0)
        lgpio.gpio_claim_output(self.chip, DIR_PIN, 0)
        lgpio.gpio_claim_output(self.chip, ENA_PIN, 0)

        lgpio.gpio_write(self.chip, ENA_PIN, 1)

        lgpio.gpio_claim_output(self.chip, ACTUATOR_IN_A, 0)
        lgpio.gpio_claim_output(self.chip, ACTUATOR_IN_B, 0)
        lgpio.gpio_claim_output(self.chip, ACTUATOR_PWM, 0)

    def extinguish_callback(self, msg):
        if msg.data == "start":
            # Start both stepper motor and actuator actions in parallel
            actuator_thread = threading.Thread(target=self.control_actuator)
            stepper_thread = threading.Thread(target=self.control_stepper_motor)

            actuator_thread.start()
            stepper_thread.start()

            actuator_thread.join()
            stepper_thread.join()

    def control_actuator(self):
        self.control_actuator_movement('extend', speed=100)
        time.sleep(3)  

        self.stop_actuator()
        self.get_logger().info("Holding actuator position for 15 seconds...")
        time.sleep(15)

        self.control_actuator_movement('retract', speed=100)
        time.sleep(3)

        self.stop_actuator()
        self.get_logger().info("Actuator back to original position.")

    def control_actuator_movement(self, direction, speed):
        if direction == 'extend':
            lgpio.gpio_write(self.chip, ACTUATOR_IN_A, 1)
            lgpio.gpio_write(self.chip, ACTUATOR_IN_B, 0)
        elif direction == 'retract':
            lgpio.gpio_write(self.chip, ACTUATOR_IN_A, 0)
            lgpio.gpio_write(self.chip, ACTUATOR_IN_B, 1)

        self.get_logger().info(f"Actuator {direction} at speed {speed}")
        for _ in range(100):  
            self.software_pwm(ACTUATOR_PWM, speed, frequency=50)

    def stop_actuator(self):
        lgpio.gpio_write(self.chip, ACTUATOR_IN_A, 0)
        lgpio.gpio_write(self.chip, ACTUATOR_IN_B, 0)

    def software_pwm(self, pwm_pin, duty_cycle, frequency=50):
        period = 1.0 / frequency 
        high_time = period * (duty_cycle / 100.0)
        low_time = period - high_time

        lgpio.gpio_write(self.chip, pwm_pin, 1)
        time.sleep(high_time)
        lgpio.gpio_write(self.chip, pwm_pin, 0)
        time.sleep(low_time)

    def control_stepper_motor(self):
        self.get_logger().info("Stepper motor activated...")

        end_time = time.time() + 21
        while time.time() < end_time:
            self.rotate_stepper('forward', steps=33) 
            time.sleep(0.5)

            self.rotate_stepper('backward', steps=33)
            time.sleep(0.5)

        lgpio.gpio_write(self.chip, ENA_PIN, 0)
        self.get_logger().info("Stepper motor deactivated.")

    def rotate_stepper(self, direction, steps):
        if direction == 'forward':
            lgpio.gpio_write(self.chip, DIR_PIN, 1)
        elif direction == 'backward':
            lgpio.gpio_write(self.chip, DIR_PIN, 0)

        for _ in range(steps):
            lgpio.gpio_write(self.chip, STEP_PIN, 1)
            time.sleep(0.005) 
            lgpio.gpio_write(self.chip, STEP_PIN, 0)
            time.sleep(0.005)

        self.get_logger().info(f"Stepper motor moved {direction} for {steps} steps.")

def main(args=None):
    rclpy.init(args=args)
    controller = ExtinguishController()

    try:
        rclpy.spin(controller)
    except KeyboardInterrupt:
        pass

    controller.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
